describe('AddToState - Prosty test kolejno≈õci wy≈õwietlania', () => {
  test('Powinna ≈ÇƒÖczyƒá elementy w prawid≈Çowej kolejno≈õci: üîµ Sales ‚Üí üîµ Blue ‚Üí üü° Yellow ‚Üí üü† Orange', () => {
    // Przyk≈Çadowe dane testowe
    const salesItems = [
      { _id: 'sale1', fullName: 'Ada CZERWONY', isFromSale: true },
      { _id: 'sale2', fullName: 'Ola NIEBIESKI', isFromSale: true }
    ];

    const blueTransfers = [
      { _id: 'blue1', fullName: 'Kasia ZIELONY', fromWarehouse: false },
      { _id: 'blue2', fullName: 'Zosia ≈ª√ì≈ÅTY', fromWarehouse: false }
    ];

    const yellowTransferItems = [
      { _id: 'yellow1', fullName: 'Magda FIOLETOWY', isIncomingTransfer: true },
      { _id: 'yellow2', fullName: 'Ania R√ì≈ªOWY', isIncomingTransfer: true }
    ];

    const orangeTransfers = [
      { _id: 'orange1', fullName: 'Paula BIA≈ÅY', fromWarehouse: true },
      { _id: 'orange2', fullName: 'Ewa CZARNY', fromWarehouse: true }
    ];

    // Logika z komponentu AddToState - ≈ÇƒÖczenie w prawid≈Çowej kolejno≈õci
    const combinedItemsData = [
      ...salesItems,
      ...blueTransfers,
      ...yellowTransferItems,
      ...orangeTransfers
    ];

    // Sprawdzenie kolejno≈õci
    expect(combinedItemsData).toHaveLength(8);
    
    // Pierwsze 2 elementy to sprzeda≈ºe (üîµ Sales)
    expect(combinedItemsData[0].isFromSale).toBe(true);
    expect(combinedItemsData[1].isFromSale).toBe(true);
    expect(combinedItemsData[0].fullName).toBe('Ada CZERWONY');
    expect(combinedItemsData[1].fullName).toBe('Ola NIEBIESKI');

    // Kolejne 2 elementy to niebieskie transfery (üîµ Blue)
    expect(combinedItemsData[2].fromWarehouse).toBe(false);
    expect(combinedItemsData[3].fromWarehouse).toBe(false);
    expect(combinedItemsData[2].fullName).toBe('Kasia ZIELONY');
    expect(combinedItemsData[3].fullName).toBe('Zosia ≈ª√ì≈ÅTY');

    // Kolejne 2 elementy to ≈º√≥≈Çte transfery (üü° Yellow)
    expect(combinedItemsData[4].isIncomingTransfer).toBe(true);
    expect(combinedItemsData[5].isIncomingTransfer).toBe(true);
    expect(combinedItemsData[4].fullName).toBe('Magda FIOLETOWY');
    expect(combinedItemsData[5].fullName).toBe('Ania R√ì≈ªOWY');

    // Ostatnie 2 elementy to pomara≈Ñczowe transfery (üü† Orange)
    expect(combinedItemsData[6].fromWarehouse).toBe(true);
    expect(combinedItemsData[7].fromWarehouse).toBe(true);
    expect(combinedItemsData[6].fullName).toBe('Paula BIA≈ÅY');
    expect(combinedItemsData[7].fullName).toBe('Ewa CZARNY');
  });

  test('Powinna dzia≈Çaƒá poprawnie z pustymi tablicami', () => {
    const salesItems = [];
    const blueTransfers = [];
    const yellowTransferItems = [];
    const orangeTransfers = [];

    const combinedItemsData = [
      ...salesItems,
      ...blueTransfers,
      ...yellowTransferItems,
      ...orangeTransfers
    ];

    expect(combinedItemsData).toHaveLength(0);
    expect(combinedItemsData).toEqual([]);
  });

  test('Powinna dzia≈Çaƒá poprawnie gdy brakuje niekt√≥rych kategorii', () => {
    const salesItems = [
      { _id: 'sale1', fullName: 'Ada CZERWONY', isFromSale: true }
    ];
    const blueTransfers = [];
    const yellowTransferItems = [];
    const orangeTransfers = [
      { _id: 'orange1', fullName: 'Paula BIA≈ÅY', fromWarehouse: true }
    ];

    const combinedItemsData = [
      ...salesItems,
      ...blueTransfers,
      ...yellowTransferItems,
      ...orangeTransfers
    ];

    expect(combinedItemsData).toHaveLength(2);
    expect(combinedItemsData[0].isFromSale).toBe(true);
    expect(combinedItemsData[1].fromWarehouse).toBe(true);
  });
});
