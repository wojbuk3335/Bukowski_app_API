import React from 'react';
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';
import '@testing-library/jest-dom';
import AddToState from './AddToState';

// Mock fetch
global.fetch = jest.fn();

// Mock window.alert
window.alert = jest.fn();
window.confirm = jest.fn();

describe('AddToState - Pomara≈Ñczowe kurtki (transfery z magazynu)', () => {
  
  beforeEach(() => {
    // Reset mocks przed ka≈ºdym testem
    jest.clearAllMocks();
    
    // Mock podstawowych odpowiedzi API
    fetch.mockImplementation((url) => {
      // Mock users API
      if (url.includes('/api/user')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve({
            users: [
              { _id: 'user1', symbol: 'Symbol1', sellingPoint: 'Punkt1', email: 'test@test.com' },
              { _id: 'user2', symbol: 'Symbol2', sellingPoint: 'Punkt2', email: 'test2@test.com' },
              { _id: 'admin', symbol: 'admin', email: 'admin@test.com' },
              { _id: 'magazyn', symbol: 'magazyn', email: 'warehouse@test.com' }
            ]
          })
        });
      }
      
      // Mock warehouse items API
      if (url.includes('/api/state/warehouse')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve([
            {
              _id: 'warehouse1',
              fullName: { fullName: 'Kurtka Testowa' },
              size: { Roz_Opis: 'M' },
              barcode: 'TEST123',
              price: 100
            },
            {
              _id: 'warehouse2', 
              fullName: { fullName: 'Inna Kurtka' },
              size: { Roz_Opis: 'L' },
              barcode: 'TEST456',
              price: 150
            }
          ])
        });
      }
      
      // Mock transfers API
      if (url.includes('/api/transfer')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve([])
        });
      }
      
      // Mock sales API
      if (url.includes('/api/sales/get-all-sales')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve([])
        });
      }
      
      // Mock state API
      if (url.includes('/api/state')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve([])
        });
      }
      
      // Mock last transaction API
      if (url.includes('/api/transfer/last-transaction')) {
        return Promise.resolve({
          ok: false,
          status: 404
        });
      }
      
      return Promise.reject(new Error('Nieznany URL'));
    });
  });

  test('renderuje sekcjƒô magazynu z produktami', async () => {
    await act(async () => {
      render(<AddToState />);
    });

    // Sprawd≈∫ czy sekcja magazynu siƒô renderuje
    await waitFor(() => {
      expect(screen.getByText('üì¶ Magazyn')).toBeInTheDocument();
    });

    // Sprawd≈∫ czy produkty z magazynu siƒô renderujƒÖ
    await waitFor(() => {
      expect(screen.getByText('Kurtka Testowa')).toBeInTheDocument();
      expect(screen.getByText('Inna Kurtka')).toBeInTheDocument();
    });
  });

  test('filtruje produkty magazynowe wed≈Çug wyszukiwanej frazy', async () => {
    await act(async () => {
      render(<AddToState />);
    });

    await waitFor(() => {
      expect(screen.getByText('Kurtka Testowa')).toBeInTheDocument();
      expect(screen.getByText('Inna Kurtka')).toBeInTheDocument();
    });

    // Znajd≈∫ pole wyszukiwania
    const searchInput = screen.getByPlaceholderText('Wpisz nazwƒô, rozmiar lub kod kreskowy...');
    
    // Wpisz frazƒô do wyszukiwania
    await act(async () => {
      fireEvent.change(searchInput, { target: { value: 'Testowa' } });
    });

    // Sprawd≈∫ czy filtrowanie dzia≈Ça
    await waitFor(() => {
      expect(screen.getByText('Kurtka Testowa')).toBeInTheDocument();
      expect(screen.queryByText('Inna Kurtka')).not.toBeInTheDocument();
    });
  });

  test('wy≈õwietla przycisk "Przenie≈õ" dla ka≈ºdego produktu w magazynie', async () => {
    await act(async () => {
      render(<AddToState />);
    });

    await waitFor(() => {
      const przeniesButtons = screen.getAllByText('Przenie≈õ', { exact: false });
      expect(przeniesButtons).toHaveLength(2); // 2 produkty w magazynie
    });
  });

  test('wymaga wybrania u≈ºytkownika przed przeniesieniem produktu z magazynu', async () => {
    await act(async () => {
      render(<AddToState />);
    });

    await waitFor(() => {
      const przeniesButton = screen.getAllByText('Przenie≈õ', { exact: false })[0];
      
      // Kliknij przycisk bez wybrania u≈ºytkownika
      fireEvent.click(przeniesButton);
    });

    // Sprawd≈∫ czy pokazuje siƒô alert
    expect(window.alert).toHaveBeenCalledWith(
      'Najpierw wybierz u≈ºytkownika do kt√≥rego chcesz przenie≈õƒá produkt!'
    );
  });

  test('przenosi produkt z magazynu do tabeli transfer√≥w po wybraniu u≈ºytkownika', async () => {
    await act(async () => {
      render(<AddToState />);
    });

    // Wybierz u≈ºytkownika
    await waitFor(() => {
      const userSelect = screen.getByDisplayValue('-- Select User --');
      fireEvent.change(userSelect, { target: { value: 'user1' } });
    });

    // Kliknij przycisk przeniesienia
    await waitFor(() => {
      const przeniesButton = screen.getAllByText('Przenie≈õ', { exact: false })[0];
      fireEvent.click(przeniesButton);
    });

    // Sprawd≈∫ czy produkt pojawi≈Ç siƒô w tabeli transfer√≥w
    await waitFor(() => {
      // Produkt powinien siƒô pojawiƒá w prawej sekcji (transfery)
      const transferRows = screen.getAllByRole('row');
      
      // Sprawd≈∫ czy jest wiƒôcej ni≈º tylko nag≈Ç√≥wek
      expect(transferRows.length).toBeGreaterThan(1);
      
      // Sprawd≈∫ czy produkt ma odpowiednie style (pomara≈Ñczowy)
      const transferRow = transferRows.find(row => 
        row.textContent.includes('Kurtka Testowa')
      );
      expect(transferRow).toBeInTheDocument();
    });
  });

  test('oznacza produkty z magazynu pomara≈Ñczowym kolorem w tabeli transfer√≥w', async () => {
    await act(async () => {
      render(<AddToState />);
    });

    // Wybierz u≈ºytkownika
    await waitFor(() => {
      const userSelect = screen.getByDisplayValue('-- Select User --');
      fireEvent.change(userSelect, { target: { value: 'user1' } });
    });

    // Przenie≈õ produkt
    await waitFor(() => {
      const przeniesButton = screen.getAllByText('Przenie≈õ', { exact: false })[0];
      fireEvent.click(przeniesButton);
    });

    // Sprawd≈∫ style pomara≈Ñczowy (#ff8c00) 
    await waitFor(() => {
      const rows = screen.getAllByRole('row');
      const transferRow = rows.find(row => 
        row.textContent.includes('Kurtka Testowa')
      );
      
      if (transferRow) {
        // Sprawd≈∫ czy ma pomara≈Ñczowy styl (mo≈ºe byƒá w r√≥≈ºnych formatach)
        const style = transferRow.style.backgroundColor;
        expect(style).toMatch(/(rgb\(255,\s*140,\s*0\)|#ff8c00|orange)/i);
      }
    });
  });

  test('wy≈õwietla przycisk "Cofnij" dla produkt√≥w przeniesionych z magazynu', async () => {
    await act(async () => {
      render(<AddToState />);
    });

    // Wybierz u≈ºytkownika i przenie≈õ produkt
    await waitFor(() => {
      const userSelect = screen.getByDisplayValue('-- Select User --');
      fireEvent.change(userSelect, { target: { value: 'user1' } });
    });

    await waitFor(() => {
      const przeniesButton = screen.getAllByText('‚û§ Przenie≈õ')[0];
      fireEvent.click(przeniesButton);
    });

    // Sprawd≈∫ czy przycisk "Cofnij" siƒô pojawi≈Ç
    await waitFor(() => {
      expect(screen.getByText('Cofnij', { exact: false })).toBeInTheDocument();
    });
  });

  test('cofa produkt z tabeli transfer√≥w z powrotem do magazynu', async () => {
    await act(async () => {
      render(<AddToState />);
    });

    // Wybierz u≈ºytkownika i przenie≈õ produkt
    await waitFor(() => {
      const userSelect = screen.getByDisplayValue('-- Select User --');
      fireEvent.change(userSelect, { target: { value: 'user1' } });
    });

    await waitFor(() => {
      const przeniesButton = screen.getAllByText('Przenie≈õ', { exact: false })[0];
      fireEvent.click(przeniesButton);
    });

    // Kliknij przycisk cofnij
    await waitFor(() => {
      const cofnijButton = screen.getByText('Cofnij', { exact: false });
      fireEvent.click(cofnijButton);
    });

    // Sprawd≈∫ czy produkt wr√≥ci≈Ç do magazynu (lewa strona)
    await waitFor(() => {
      // Powinien byƒá z powrotem w lewej sekcji magazynu
      const magazynSection = screen.getByText('üì¶ Magazyn').closest('div');
      expect(magazynSection).toHaveTextContent('Kurtka Testowa');
    });
  });

  test('usuwa produkty z magazynu wizualnie po przeniesieniu', async () => {
    await act(async () => {
      render(<AddToState />);
    });

    // Sprawd≈∫ poczƒÖtkowƒÖ liczbƒô produkt√≥w
    await waitFor(() => {
      expect(screen.getByText('Znaleziono: 2 produkt√≥w')).toBeInTheDocument();
    });

    // Wybierz u≈ºytkownika i przenie≈õ produkt
    await waitFor(() => {
      const userSelect = screen.getByDisplayValue('-- Select User --');
      fireEvent.change(userSelect, { target: { value: 'user1' } });
    });

    await waitFor(() => {
      const przeniesButton = screen.getAllByText('‚û§ Przenie≈õ')[0];
      fireEvent.click(przeniesButton);
    });

    // Sprawd≈∫ czy liczba produkt√≥w w magazynie siƒô zmniejszy≈Ça
    await waitFor(() => {
      expect(screen.getByText('Znaleziono: 1 produkt√≥w')).toBeInTheDocument();
    });
  });

  test('filtruje u≈ºytkownik√≥w - wyklucza admin, magazyn i dom', async () => {
    await act(async () => {
      render(<AddToState />);
    });

    await waitFor(() => {
      const userSelect = screen.getByDisplayValue('-- Select User --');
      const options = userSelect.querySelectorAll('option');
      
      // Sprawd≈∫ czy sƒÖ tylko w≈Ça≈õciwi u≈ºytkownicy (+ opcja "Select User")
      expect(options).toHaveLength(3); // 1 placeholder + 2 w≈Ça≈õciwych u≈ºytkownik√≥w
      
      // Sprawd≈∫ czy admin i magazyn nie sƒÖ na li≈õcie
      const optionTexts = Array.from(options).map(option => option.textContent);
      expect(optionTexts).not.toContain('admin');
      expect(optionTexts).not.toContain('magazyn');
    });
  });

  test('wy≈õwietla poprawne dane produktu w tabeli transfer√≥w', async () => {
    await act(async () => {
      render(<AddToState />);
    });

    // Wybierz u≈ºytkownika i przenie≈õ produkt
    await waitFor(() => {
      const userSelect = screen.getByDisplayValue('-- Select User --');
      fireEvent.change(userSelect, { target: { value: 'user1' } });
    });

    await waitFor(() => {
      const przeniesButton = screen.getAllByText('‚û§ Przenie≈õ')[0];
      fireEvent.click(przeniesButton);
    });

    // Sprawd≈∫ czy wszystkie dane sƒÖ poprawnie wy≈õwietlone
    await waitFor(() => {
      expect(screen.getByText('Kurtka Testowa')).toBeInTheDocument(); // Nazwa
      expect(screen.getByText('M')).toBeInTheDocument(); // Rozmiar  
      expect(screen.getByText('MAGAZYN')).toBeInTheDocument(); // Transfer_from
      expect(screen.getByText('Symbol1')).toBeInTheDocument(); // Transfer_to
      expect(screen.getByText('TEST123')).toBeInTheDocument(); // Product ID (barcode)
      expect(screen.getByText('Przeniesienie z magazynu')).toBeInTheDocument(); // Reason
    });
  });

});
