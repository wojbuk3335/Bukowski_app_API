version: '3.8'

services:
  # üöÄ BACKEND API
  backend:
    build: .
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    networks:
      - app-network
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # üóÉÔ∏è MONGODB (opcjonalnie, je≈õli u≈ºywasz lokalnej bazy)
  mongodb:
    image: mongo:6.0
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-backup:/backup
    networks:
      - app-network
    ports:
      - "127.0.0.1:27017:27017"  # Tylko localhost

  # üåê NGINX REVERSE PROXY
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ../frontend/build:/var/www/html:ro
    networks:
      - app-network
    depends_on:
      - backend

  # üìä MONITORING (opcjonalnie)
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 --cleanup
    restart: unless-stopped

volumes:
  mongodb_data:

networks:
  app-network:
    driver: bridge