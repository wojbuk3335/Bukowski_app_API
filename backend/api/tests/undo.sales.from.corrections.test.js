const transferProcessing = require('../app/controllers/transferProcessing');

describe('UNDO - Przywracanie sprzeda≈ºy z korekt (prosty test)', () => {

    test('1. Powinien wykryƒá sprzeda≈º po tek≈õcie "w ramach sprzeda≈ºy"', () => {
        console.log('üîç Testujemy wykrywanie sprzeda≈ºy po tek≈õcie');
        
        // Dane z korekty zawierajƒÖcej sprzeda≈º
        const correctionEntry = {
            details: 'Transfer produktu Ada CZERWONY w ramach sprzeda≈ºy do punktu T',
            from: 'KOREKTY',
            to: 'KOREKTY'
        };

        // Sprawdzamy czy detection logic wykryje sprzeda≈º
        const isSaleCorrection = correctionEntry.details.includes('w ramach sprzeda≈ºy');
        
        expect(isSaleCorrection).toBe(true);
        console.log('‚úÖ Wykryto sprzeda≈º w tek≈õcie korekty');
    });

    test('2. Powinien nie wykryƒá sprzeda≈ºy w zwyk≈Çym transferze', () => {
        console.log('üîç Testujemy zwyk≈Çy transfer (nie sprzeda≈º)');
        
        // Dane z korekty zwyk≈Çego transferu
        const correctionEntry = {
            details: 'Transfer produktu Ada CZERWONY z punktu P do punktu T',
            from: 'KOREKTY',
            to: 'KOREKTY'
        };

        // Sprawdzamy czy detection logic nie wykryje sprzeda≈ºy
        const isSaleCorrection = correctionEntry.details.includes('w ramach sprzeda≈ºy');
        
        expect(isSaleCorrection).toBe(false);
        console.log('‚úÖ Nie wykryto sprzeda≈ºy w zwyk≈Çym transferze');
    });

    test('3. Powinien utworzyƒá Sales object dla korekty sprzeda≈ºy', () => {
        console.log('üîç Testujemy tworzenie Sales object');
        
        // Mockujemy dane korekty sprzeda≈ºy
        const correctionEntry = {
            details: 'Transfer produktu Ada CZERWONY w ramach sprzeda≈ºy do punktu T',
            from: 'KOREKTY',
            to: 'KOREKTY',
            barcode: '1234567890',
            fullName: 'Ada CZERWONY',
            size: 'M',
            originalData: {
                sellingPoint: 'T',
                timestamp: new Date(),
                barcode: '1234567890'
            }
        };

        const isSaleCorrection = correctionEntry.details.includes('w ramach sprzeda≈ºy');
        
        if (isSaleCorrection && correctionEntry.originalData) {
            // Symulujemy tworzenie Sales object
            const salesObject = {
                fullName: correctionEntry.fullName,
                barcode: correctionEntry.barcode,
                size: correctionEntry.size,
                sellingPoint: correctionEntry.originalData.sellingPoint,
                timestamp: correctionEntry.originalData.timestamp,
                processed: false
            };

            expect(salesObject.sellingPoint).toBe('T');
            expect(salesObject.processed).toBe(false);
            expect(salesObject.fullName).toBe('Ada CZERWONY');
            console.log('‚úÖ Sales object utworzony prawid≈Çowo');
            console.log(`   - sellingPoint: ${salesObject.sellingPoint}`);
            console.log(`   - processed: ${salesObject.processed}`);
        }
    });

    test('4. Powinien utworzyƒá Transfer object dla zwyk≈Çej korekty', () => {
        console.log('üîç Testujemy tworzenie Transfer object');
        
        // Mockujemy dane korekty zwyk≈Çego transferu
        const correctionEntry = {
            details: 'Transfer produktu Ada CZERWONY z punktu P do punktu T',
            from: 'KOREKTY',
            to: 'KOREKTY',
            barcode: '1234567890',
            fullName: 'Ada CZERWONY',
            size: 'M',
            originalData: {
                transfer_to: 'T',
                timestamp: new Date()
            }
        };

        const isSaleCorrection = correctionEntry.details.includes('w ramach sprzeda≈ºy');
        
        if (!isSaleCorrection && correctionEntry.originalData) {
            // Symulujemy tworzenie Transfer object
            const transferObject = {
                fullName: correctionEntry.fullName,
                barcode: correctionEntry.barcode,
                size: correctionEntry.size,
                transfer_to: correctionEntry.originalData.transfer_to,
                timestamp: correctionEntry.originalData.timestamp,
                processed: false
            };

            expect(transferObject.transfer_to).toBe('T');
            expect(transferObject.processed).toBe(false);
            expect(transferObject.fullName).toBe('Ada CZERWONY');
            console.log('‚úÖ Transfer object utworzony prawid≈Çowo');
            console.log(`   - transfer_to: ${transferObject.transfer_to}`);
            console.log(`   - processed: ${transferObject.processed}`);
        }
    });

    test('5. Powinien rozr√≥≈ºniƒá r√≥≈ºne typy korekt', () => {
        console.log('üîç Testujemy rozr√≥≈ºnianie typ√≥w korekt');
        
        const testCases = [
            {
                details: 'Transfer produktu Ada CZERWONY w ramach sprzeda≈ºy do punktu T',
                expectedType: 'sale'
            },
            {
                details: 'Transfer produktu Ada CZERWONY z punktu P do punktu T',
                expectedType: 'transfer'
            },
            {
                details: 'Produkt Ada CZERWONY w ramach sprzeda≈ºy - korekta',
                expectedType: 'sale'
            },
            {
                details: 'Korekta transferu Ada CZERWONY P->T',
                expectedType: 'transfer'
            }
        ];

        testCases.forEach((testCase, index) => {
            const isSaleCorrection = testCase.details.includes('w ramach sprzeda≈ºy');
            const actualType = isSaleCorrection ? 'sale' : 'transfer';
            
            expect(actualType).toBe(testCase.expectedType);
            console.log(`‚úÖ Test ${index + 1}: "${testCase.details}" -> ${actualType}`);
        });

        console.log('‚úÖ Wszystkie typy korekt rozpoznane prawid≈Çowo');
    });

    test('6. Powinien obs≈Çu≈ºyƒá brak originalData', () => {
        console.log('üîç Testujemy obs≈Çugƒô braku originalData');
        
        // Korekta bez originalData (legacy case)
        const correctionEntry = {
            details: 'Transfer produktu Ada CZERWONY w ramach sprzeda≈ºy do punktu T',
            from: 'KOREKTY',
            to: 'KOREKTY',
            barcode: '1234567890',
            fullName: 'Ada CZERWONY',
            size: 'M'
            // originalData: undefined
        };

        const isSaleCorrection = correctionEntry.details.includes('w ramach sprzeda≈ºy');
        
        // Sprawdzamy ≈ºe wykrywa sprzeda≈º ale gracefully handles brak originalData
        expect(isSaleCorrection).toBe(true);
        expect(correctionEntry.originalData).toBeUndefined();
        
        console.log('‚úÖ Wykryto sprzeda≈º mimo braku originalData');
        console.log('‚úÖ System mo≈ºe fallback do innych metod');
    });

});
