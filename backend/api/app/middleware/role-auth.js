const jwt = require('jsonwebtoken');
const { jsonwebtoken } = require('../config');

// ðŸ”’ MIDDLEWARE KONTROLI RÃ“L I UPRAWNIEÅƒ
const roleAuth = {
    
    // Sprawdza czy uÅ¼ytkownik ma okreÅ›lonÄ… rolÄ™
    requireRole: (allowedRoles) => {
        return (req, res, next) => {
            try {
                // SprawdÅº czy istniejÄ… dane uÅ¼ytkownika (po checkAuth)
                if (!req.userData) {
                    return res.status(401).json({
                        message: 'Brak danych autoryzacji. UÅ¼yj checkAuth middleware przed roleAuth.'
                    });
                }

                const userRole = req.userData.role || req.userData.userRole;
                
                if (!userRole) {
                    return res.status(403).json({
                        message: 'Nie znaleziono roli uÅ¼ytkownika w tokenie.'
                    });
                }

                // SprawdÅº czy rola uÅ¼ytkownika jest na liÅ›cie dozwolonych
                const rolesArray = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles];
                
                if (!rolesArray.includes(userRole)) {
                    console.warn(`ðŸš« ODMOWA DOSTÄ˜PU: UÅ¼ytkownik ${req.userData.email} (${userRole}) prÃ³bowaÅ‚ uzyskaÄ‡ dostÄ™p do ${req.method} ${req.originalUrl}`);
                    return res.status(403).json({
                        message: `Brak uprawnieÅ„. Wymagana rola: ${rolesArray.join(' lub ')}, twoja rola: ${userRole}`
                    });
                }

                console.log(`âœ… DOSTÄ˜P PRZYZNANY: ${req.userData.email} (${userRole}) -> ${req.method} ${req.originalUrl}`);
                next();
            } catch (error) {
                return res.status(500).json({
                    message: 'BÅ‚Ä…d podczas sprawdzania uprawnieÅ„',
                    error: error.message
                });
            }
        };
    },

    // Tylko dla administratorÃ³w
    adminOnly: function() {
        return this.requireRole(['admin']);
    },

    // Tylko dla administratorÃ³w i magazynu
    adminOrMagazyn: function() {
        return this.requireRole(['admin', 'magazyn']);
    },

    // Dla administratorÃ³w, magazynu i domu
    privilegedUsers: function() {
        return this.requireRole(['admin', 'magazyn', 'dom']);
    },

    // Sprawdza czy uÅ¼ytkownik moÅ¼e operowaÄ‡ na swoim punkcie sprzedaÅ¼y
    ownSellingPointOnly: (req, res, next) => {
        try {
            const userSellingPoint = req.userData.sellingPoint;
            const requestedSellingPoint = req.body.sellingPoint || req.params.sellingPoint || req.query.sellingPoint;

            // Admin i magazyn mogÄ… operowaÄ‡ na wszystkich punktach
            if (['admin', 'magazyn'].includes(req.userData.role)) {
                return next();
            }

            // UÅ¼ytkownicy mogÄ… operowaÄ‡ tylko na swoim punkcie
            if (requestedSellingPoint && requestedSellingPoint !== userSellingPoint) {
                return res.status(403).json({
                    message: `MoÅ¼esz operowaÄ‡ tylko na swoim punkcie sprzedaÅ¼y: ${userSellingPoint}`
                });
            }

            next();
        } catch (error) {
            return res.status(500).json({
                message: 'BÅ‚Ä…d podczas sprawdzania uprawnieÅ„ do punktu sprzedaÅ¼y',
                error: error.message
            });
        }
    }
};

module.exports = roleAuth;