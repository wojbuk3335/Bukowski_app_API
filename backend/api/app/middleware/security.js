const mongoose = require('mongoose');

// ðŸ”’ MIDDLEWARE BEZPIECZEÅƒSTWA
const securityMiddleware = {
    
    // Walidacja ObjectId MongoDB
    validateObjectId: (req, res, next) => {
        const params = Object.keys(req.params);
        for (const param of params) {
            if (param.includes('Id') && req.params[param]) {
                if (!mongoose.Types.ObjectId.isValid(req.params[param])) {
                    return res.status(400).json({
                        error: `NieprawidÅ‚owy format ID: ${param}`
                    });
                }
            }
        }
        next();
    },

    // Logowanie podejrzanych aktywnoÅ›ci
    suspiciousActivityLogger: (req, res, next) => {
        const userAgent = req.get('User-Agent') || '';
        const suspiciousPatterns = [
            /sqlmap/i,
            /nikto/i,
            /nessus/i,
            /nmap/i,
            /burp/i,
            /scanner/i
        ];

        if (suspiciousPatterns.some(pattern => pattern.test(userAgent))) {
            console.warn(`ðŸš¨ PODEJRZANA AKTYWNOÅšÄ†: ${req.ip} - ${userAgent} - ${req.url}`);
        }
        next();
    },

    // Sprawdzanie dÅ‚ugoÅ›ci danych wejÅ›ciowych
    inputSizeValidator: (maxSize = 10000) => {
        return (req, res, next) => {
            const bodySize = JSON.stringify(req.body).length;
            if (bodySize > maxSize) {
                return res.status(413).json({
                    error: 'Dane wejÅ›ciowe zbyt duÅ¼e'
                });
            }
            next();
        };
    },

    // Blokowanie znanych zÅ‚oÅ›liwych IP (przykÅ‚ad)
    ipBlacklist: (req, res, next) => {
        const blacklistedIps = [
            // Dodaj znane zÅ‚oÅ›liwe IP
        ];

        if (blacklistedIps.includes(req.ip)) {
            console.warn(`ðŸš« ZABLOKOWANE IP: ${req.ip}`);
            return res.status(403).json({
                error: 'DostÄ™p zabroniony'
            });
        }
        next();
    }
};

module.exports = securityMiddleware;