const express = require('express');
const router = express.Router();
const checkAuth = require('../middleware/check-auth');
const financialOperationController = require('../controllers/financialOperations');

// Test route - sprawdÅº czy API dziaÅ‚a
router.get('/test', (req, res) => {
    res.status(200).json({ message: 'Financial Operations API is working!' });
});

// CRUD operations for financial operations
router.post('/', checkAuth, financialOperationController.createFinancialOperation); // ğŸ”’ğŸ”’ğŸ”’ UtwÃ³rz operacjÄ™ finansowÄ…
router.get('/', checkAuth, financialOperationController.getFinancialOperations); // ğŸ”’ğŸ”’ğŸ”’ Lista operacji finansowych
router.get('/:id', checkAuth, financialOperationController.getFinancialOperationById); // ğŸ”’ğŸ”’ğŸ”’ Operacja wedÅ‚ug ID
router.put('/:id', checkAuth, financialOperationController.updateFinancialOperation); // ğŸ”’ğŸ”’ğŸ”’ Aktualizuj operacjÄ™
router.delete('/:id', checkAuth, financialOperationController.deleteFinancialOperation); // ğŸ”’ğŸ”’ğŸ”’ UsuÅ„ operacjÄ™
router.delete('/all', checkAuth, financialOperationController.deleteAllFinancialOperations); // ğŸ”’ğŸ”’ğŸ”’ BARDZO NIEBEZPIECZNE - usuÅ„ wszystkie

// Additional routes
router.get('/user/:userSymbol', checkAuth, financialOperationController.getFinancialOperationsByUser); // ğŸ”’ğŸ”’ğŸ”’ Operacje uÅ¼ytkownika
router.get('/type/:type', checkAuth, financialOperationController.getFinancialOperationsByType); // ğŸ”’ğŸ”’ğŸ”’ Operacje wedÅ‚ug typu

module.exports = router;