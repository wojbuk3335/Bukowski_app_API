// üö® TYMCZASOWY ENDPOINT DO RESETOWANIA HAS≈ÅA
// USU≈É TEN PLIK NATYCHMIAST PO NAPRAWIE PROBLEMU!

const express = require('express');
const router = express.Router();
const User = require('../db/models/user');
const argon2 = require('argon2');

// üö® NIEBEZPIECZNY ENDPOINT - TYLKO DO NAPRAWY!
// Pozwala zmieniƒá has≈Ço bez autoryzacji
router.post('/emergency-password-reset', async (req, res) => {
    try {
        const { email, newPassword, confirmPassword, emergencyKey } = req.body;
        
        // Prosty klucz bezpiecze≈Ñstwa
        if (emergencyKey !== 'bukowski_emergency_2025') {
            return res.status(403).json({
                message: '‚ùå Nieprawid≈Çowy klucz bezpiecze≈Ñstwa'
            });
        }

        if (newPassword !== confirmPassword) {
            return res.status(400).json({
                message: '‚ùå Has≈Ça nie sƒÖ identyczne'
            });
        }

        if (newPassword.length < 6) {
            return res.status(400).json({
                message: '‚ùå Has≈Ço musi mieƒá minimum 6 znak√≥w'
            });
        }

        // Znajd≈∫ u≈ºytkownika
        const user = await User.findOne({ email }).exec();
        if (!user) {
            return res.status(404).json({
                message: '‚ùå U≈ºytkownik nie istnieje',
                email: email
            });
        }

        // Zaszyfruj nowe has≈Ço
        const hashedPassword = await argon2.hash(newPassword);

        // Zaktualizuj has≈Ço
        await User.updateOne(
            { email: email },
            { $set: { password: hashedPassword } }
        ).exec();

        res.status(200).json({
            message: '‚úÖ Has≈Ço zosta≈Ço zresetowane pomy≈õlnie!',
            email: email,
            warning: 'üö® USU≈É TEN ENDPOINT NATYCHMIAST PO U≈ªYCIU!'
        });

    } catch (error) {
        console.error('Emergency password reset error:', error);
        res.status(500).json({
            message: '‚ùå B≈ÇƒÖd podczas resetowania has≈Ça',
            error: error.message
        });
    }
});

// Endpoint do sprawdzenia czy u≈ºytkownik istnieje
router.get('/check-user/:email', async (req, res) => {
    try {
        const email = req.params.email;
        const user = await User.findOne({ email }, {
            email: 1,
            role: 1,
            symbol: 1,
            sellingPoint: 1,
            createdAt: 1
        }).exec();

        if (user) {
            res.status(200).json({
                message: '‚úÖ U≈ºytkownik istnieje',
                user: user
            });
        } else {
            res.status(404).json({
                message: '‚ùå U≈ºytkownik nie istnieje',
                searchedEmail: email
            });
        }
    } catch (error) {
        res.status(500).json({
            error: error.message
        });
    }
});

module.exports = router;