const express = require('express');
const router = express.Router();
const transferController = require('../controllers/transfer');
const checkAuth = require('../middleware/check-auth'); // ğŸ”’ TRANSFERY - KRYTYCZNE ZABEZPIECZENIE

// ========== ZABEZPIECZONE ENDPOINTY TESTOWE ==========
router.get('/test', checkAuth, (req, res) => {
    res.status(200).json({ message: 'API is working!' });
}); // ğŸ”’ Test endpoint teraz wymaga autoryzacji

// ========== WSZYSTKIE TRANSFERY WYMAGAJÄ„ AUTORYZACJI ==========
router.post('/', checkAuth, transferController.createTransfer); // ğŸ”’ Tworzenie transferu
router.get('/', checkAuth, transferController.getTransfers); // ğŸ”’ Lista transferÃ³w
router.get('/debug/all', checkAuth, transferController.getAllTransfersDebug); // ğŸ”’ DEBUG - wraÅ¼liwe dane
router.get('/:id', checkAuth, transferController.getTransferById); // ğŸ”’ Konkretny transfer
router.put('/:id', checkAuth, transferController.updateTransfer); // ğŸ”’ Aktualizacja transferu
router.delete('/all', checkAuth, transferController.deleteAllTransfers); // ğŸ”’ BARDZO NIEBEZPIECZNE - usuÅ„ wszystkie
router.delete('/by-id/:id', checkAuth, transferController.deleteTransferById); // ğŸ”’ UsuÅ„ po ID
router.delete('/:productId', checkAuth, transferController.deleteTransferByProductId); // ğŸ”’ UsuÅ„ po productId
router.patch('/:id/cancel', checkAuth, transferController.cancelTransfer); // ğŸ”’ Anulowanie transferu
router.post('/manage-indexes', checkAuth, transferController.manageIndexes); // ğŸ”’ ZarzÄ…dzanie indeksami

module.exports = router;